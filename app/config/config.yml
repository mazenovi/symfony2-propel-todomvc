imports:
    - { resource: parameters.yml }
    - { resource: security.yml }

framework:
    #esi:             ~
    #translator:      { fallback: %locale% }
    translator: ~
    secret:          %secret%
    router:          { resource: "%kernel.root_dir%/config/routing.yml" }
    form:            true
    csrf_protection: true
    validation:      { enable_annotations: true }
    templating:      { engines: ['twig'] } #assets_version: SomeVersionScheme
    default_locale:  %locale%
    session: ~
        #auto_start:     true

# Twig Configuration
twig:
    debug:            %kernel.debug%
    strict_variables: %kernel.debug%

# Assetic Configuration
assetic:
    debug:          %kernel.debug%
    use_controller: false
    filters:
        cssrewrite: ~
        less:
            node: /usr/local/bin/node
            node_paths: [/usr/local/lib/node_modules]
            apply_to: "\.less$"
        yui_css:
            jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"
        yui_js:
            jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"

# Propel Configuration
propel:
    dbal:
        driver:               mysql
        user:                 %database_user%
        password:             %database_password%
        dsn:                  mysql:host=%database_host%;dbname=%database_name%;charset=UTF8
        options:              {}
        attributes:           {}
    build_properties:
        propel.mysql.tableType: InnoDB
        propel.behavior.typehintable.class: vendor.TypehintableBehavior.src.TypehintableBehavior

# Swiftmailer Configuration
swiftmailer:
    transport: %mailer_transport%
    host:      %mailer_host%
    username:  %mailer_user%
    password:  %mailer_password%
    spool:     { type: memory }

sensio_framework_extra:
    view:    { annotations: false }
    router:  { annotations: true }


jms_serializer:
    metadata:
        directories:
            propel:
                namespace_prefix: ''
                path: @MazenoviTodoMVCBundle/Resources/config/serializer

fos_rest:
    service:
        view_handler: mazenovi_todomvc.view_handler
    view:
        default_engine: twig
        force_redirects:
            html: true
        formats:
            json: true
            xml: true
        templating_formats:
            html: true
        failed_validation: HTTP_BAD_REQUEST
    format_listener:
        default_priorities: [html, json, '*/*']
        prefer_extension: true
    # see also https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/3-listener-support.md#Query fetcher listener
    # see also https://github.com/liip/LiipHelloBundle/blob/query_param-proof-of-concept/Controller/RestController.php#L25
    # must be force
    #param_fetcher_listener: force

fos_user:
    service:
        mailer: fos_user.mailer.noop
    user_class:  FOS\UserBundle\Propel\User
    # @todo how to use a custom class
    #user_class:  Mazenovi\UserBundle\Model\User
    db_driver: propel
    firewall_name: main

hwi_oauth:
    # name of the firewall in which this bundle is active, this setting MUST be set
    firewall_name: main
    resource_owners:
        facebook:
            type:                facebook
            client_id:           %facebook_client_id%
            client_secret:       %facebook_client_secret%
            scope:               ""
    # optional FOSUserBundle integration
    fosub:
        # try 30 times to check if a username is available (foo, foo1, foo2 etc)
        username_iterations: 30

        # mapping between resource owners (see below) and properties
        properties:
            facebook: facebookId
parameters:
    behat:
        base_url: http://todo/app_dev.php

mopa_bootstrap:
    navbar: ~
    form:
        render_fieldset: false
        show_legend: false

services:
    mopa_bootstrap.navbar:
        class: %mopa_bootstrap.navbar.generic%
        arguments:
            # first argument: a named array of menues:
            - { leftmenu: @todo.navbar_main_menu=, rightmenu: @todo.navbar_right_menu= }
            # second argument: a named array of FormType Classes  
            - { searchform: Mazenovi\TodoMVCBundle\Form\Type\SearchFormType }
            # third argument: a named array of options
            - { title: "Todos", titleRoute: "mazenovi_todomvc_api_index", fixedTop: true, isFluid: true, template:MazenoviTodoMVCBundle:Navbar:navbar.html.twig }
        tags:
            # The alias is used to retrieve the navbar in templates
            - { name: mopa_bootstrap.navbar, alias: todoNavbar }

    todo.navbar_menu_builder:
        class: Mazenovi\TodoMVCBundle\Navbar\NavbarMenuBuilder
        scope: request
        arguments: [ '@knp_menu.factory', '@security.context' ]

    todo.navbar_main_menu:
        class: Knp\Menu\MenuItem
        factory_service: todo.navbar_menu_builder
        factory_method: createMainMenu
        arguments: [ '@request' ]
        scope: request
        tags:
            - { name: knp_menu.menu, alias: main }

    todo.navbar_right_menu:
        class: Knp\Menu\MenuItem
        factory_service: todo.navbar_menu_builder
        factory_method: createRightSideDropdownMenu
        arguments: [ '@request' ]
        scope: request
        tags:
            - { name: knp_menu.menu, alias: main }